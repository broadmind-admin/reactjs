1
00:00:03,230 --> 00:00:08,180
Now before we get into the next video where we're going to build some of these components and actually

2
00:00:08,180 --> 00:00:15,250
start making our app I want to go over something you notice here that we're rendering this app which

3
00:00:15,370 --> 00:00:22,970
isn't HMO but our own custom component that is we're importing this app file which is app.

4
00:00:23,800 --> 00:00:25,080
And don't worry about this code.

5
00:00:25,090 --> 00:00:30,250
This is something that we're going to write later on but we see over here that we're returning under

6
00:00:30,250 --> 00:00:32,870
the render some HMO.

7
00:00:33,250 --> 00:00:42,280
Now the way you react works is that we can combine these HMO like elements such as Dev or H1 but also

8
00:00:42,280 --> 00:00:46,830
create our own custom ones like we will like search box or card list.

9
00:00:47,570 --> 00:00:54,250
And just like we saw on our developer tools with react these components we have capital letters and

10
00:00:54,250 --> 00:00:58,390
I've use some highlighting here so that it doesn't highlight them you can see the difference between

11
00:00:58,780 --> 00:01:06,880
a component that we built which starts with a capital letter and a component that comes pre-built and

12
00:01:06,880 --> 00:01:10,990
reacts which are like a schmo Dave or H1.

13
00:01:11,080 --> 00:01:18,600
These are lowercase and as you remember with the react component architecture all we're doing is just

14
00:01:18,600 --> 00:01:27,680
creating and combining these Lego blocks together and the syntax is either using the class syntax with

15
00:01:27,980 --> 00:01:29,760
a capital letter.

16
00:01:29,780 --> 00:01:37,150
So now we can use the app component or if we go to something like search box or car list let's do a

17
00:01:37,150 --> 00:01:44,000
search box again we won't have this here but we will build them over the next couple of videos you'll

18
00:01:44,000 --> 00:01:52,270
see that here I have a different way of building a component and this use this just an arrow function.

19
00:01:52,270 --> 00:01:59,650
So remember when we first did the create react app how we had function search box or in our case we

20
00:01:59,650 --> 00:02:12,520
had the app backed in here we returned some J OSX like H1 well this is the same thing except that we're

21
00:02:12,520 --> 00:02:15,260
using the arrow function way.

22
00:02:15,460 --> 00:02:21,580
So there's two ways like this of creating components the class component and functional component.

23
00:02:21,670 --> 00:02:27,070
Now that's something that we're gonna go get into a lot because it's an important concept and react

24
00:02:27,340 --> 00:02:31,610
and has some implications but we're getting ahead of ourselves.

25
00:02:31,630 --> 00:02:39,040
The key here is to realize that we have for now two ways of building components either just as functions

26
00:02:39,340 --> 00:02:49,510
like this again using capital naming system or using classes like this and both of these no matter what

27
00:02:49,720 --> 00:02:58,440
always returns some sort of J asks for us some sort of react elements now another thing I want to mention

28
00:02:58,890 --> 00:03:05,640
is the folder structure that we're going to build throughout our course and a good folder structure

29
00:03:05,640 --> 00:03:12,150
is really really important on any project as projects get bigger and bigger as we get more and more

30
00:03:12,360 --> 00:03:13,760
JavaScript files.

31
00:03:13,830 --> 00:03:16,980
Things are going to get complicated so we need to be organized.

32
00:03:17,040 --> 00:03:24,060
So we're gonna be structuring our app like a lot of professional reactive helpers ha so that we stay

33
00:03:24,210 --> 00:03:33,000
organized and what you'll notice here is that e war when creating components likes being very explicit.

34
00:03:33,000 --> 00:03:43,740
That is if a component in this component folder has J.S. X in it he actually ends the file with DOT

35
00:03:43,830 --> 00:03:47,550
J as sex and you see we have that little react icon.

36
00:03:47,580 --> 00:03:53,610
If I go down to the bottom over here you see that it's javascript react so J.S. X simply means it's

37
00:03:53,610 --> 00:03:57,770
javascript but with this J.S. X syntax.

38
00:03:57,810 --> 00:04:02,060
Now if I change this to a simple JavaScript file it's still going to work.

39
00:04:02,130 --> 00:04:09,970
It's why app does J.S. still works the way it does and this is actually just personal preference.

40
00:04:09,970 --> 00:04:15,910
This is how e while enjoys organizing his code because this right away I can look at it and say oh this

41
00:04:15,910 --> 00:04:19,390
is a react JavaScript or J x file.

42
00:04:19,720 --> 00:04:25,510
But at the end of the day remember create react app takes everything through Westpac and Babel will

43
00:04:25,510 --> 00:04:29,640
actually convert this J sex file into a javascript file.

44
00:04:29,800 --> 00:04:33,460
So whether you do J sex or jazz it doesn't really matter.

45
00:04:33,460 --> 00:04:36,480
Maybe your editor will help you with an icon but that's about it.

46
00:04:37,580 --> 00:04:39,160
It's just personal preference.

47
00:04:39,210 --> 00:04:44,620
It's all about structuring your application in a way that's easy to understand that makes sense.

48
00:04:44,640 --> 00:04:47,220
Even the naming convention here is important.

49
00:04:47,220 --> 00:04:53,820
Where again just by looking at the file even though it's in the components folder right away I know.

50
00:04:53,900 --> 00:04:54,380
Oh yeah.

51
00:04:54,380 --> 00:04:58,750
This is a component and this is the style for the component now.

52
00:04:58,890 --> 00:05:04,470
These styles these C assessed files that we're gonna be writing and trust me we're gonna be writing

53
00:05:04,470 --> 00:05:10,980
a lot of them at the end of the day what happens underneath the hood is that create react app combines

54
00:05:11,070 --> 00:05:12,980
everything altogether.

55
00:05:13,080 --> 00:05:21,900
And if you remember if we go back to our test folder when we run NPM run built and we go to the C file

56
00:05:22,260 --> 00:05:27,050
you see over here that we have a chunk of CSX with a dot map.

57
00:05:27,050 --> 00:05:33,890
This is a source map which just helps us debug our code and production but we have just one massive

58
00:05:33,980 --> 00:05:42,920
CSX file and that's what create react app does even though we'll have different C Ss files in our workspace

59
00:05:42,960 --> 00:05:49,240
in our source folder at the end of the day when we release to production all of these are going to get

60
00:05:49,240 --> 00:05:55,230
combined together and although we're still early in the course although we haven't really built all

61
00:05:55,250 --> 00:06:00,540
these components I want to start noticing these things as we build things.

62
00:06:00,560 --> 00:06:06,560
We're going to be thinking about how to stay organized instead of just having all the files in one directory

63
00:06:06,680 --> 00:06:10,460
instead of not having any organization right from the beginning of the project.

64
00:06:10,460 --> 00:06:15,020
We're starting to think about how we want to architect it and this is an important principle that we're

65
00:06:15,020 --> 00:06:19,940
going to take with us through all the rest of the course let's keep on.
